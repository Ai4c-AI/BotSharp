// <auto-generated />
using System;
using System.Collections.Generic;
using BotSharp.Plugin.EntityFrameworkCore;
using BotSharp.Plugin.EntityFrameworkCore.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotSharp.Plugin.EntityFrameworkCore.PostgreSql.Migrations
{
    [DbContext(typeof(BotSharpEfCoreDbContext))]
    partial class BotSharpEfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<ChannelInstruction>>("ChannelInstructions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<List<FunctionDef>>("Functions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("InheritAgentId")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<AgentLlmConfig>("LlmConfig")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Profiles")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<AgentResponse>>("Responses")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<RoutingRule>>("RoutingRules")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<string>>("Samples")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<AgentTemplate>>("Templates")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Utilities")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_Agents", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.AgentTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DirectAgentId")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_AgentTasks", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DialogCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleAlias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.HasIndex("Title");

                    b.HasIndex("TitleAlias");

                    b.ToTable("BotSharp_Conversations", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationContentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationContentLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationDialog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<Dialog>>("Dialogs")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationDialogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationState", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<BreakpointInfo>>("Breakpoints")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationStates", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationStateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("States")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationStateLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ExecutionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("Logs")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ExecutionLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.LlmCompletionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<PromptLog>>("Logs")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_LlmCompletionLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Plugin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("EnabledPlugins")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_Plugins", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.State", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationStateId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Readonly")
                        .HasColumnType("boolean");

                    b.Property<bool>("Versioning")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ConversationStateId");

                    b.HasIndex("Id");

                    b.HasIndex("Key");

                    b.ToTable("BotSharp_States", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.StateValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ActiveRounds")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("MessageId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Data")
                        .HasDatabaseName("IX_StateValues_Data");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_StateValues_Id");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("IX_StateValues_MessageId");

                    b.HasIndex("StateId")
                        .HasDatabaseName("IX_StateValues_StateId");

                    b.ToTable("BotSharp_StateValues", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.TranslationMemory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("HashText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<TranslationMemoryInfo>>("Translations")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_TranslationMemorys", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_Users", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.UserAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Editable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_UserAgents", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.State", b =>
                {
                    b.HasOne("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationState", "ConversationState")
                        .WithMany("States")
                        .HasForeignKey("ConversationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationState");
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.StateValue", b =>
                {
                    b.HasOne("BotSharp.Plugin.EntityFrameworkCore.Entities.State", "State")
                        .WithMany("Values")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationState", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.State", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
